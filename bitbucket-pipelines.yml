image: node:10.15.3

pipelines:
  custom: # Pipelines that can only be triggered manually
    staging:
      - step:
          name: Installing
          caches:
            - node
          script:
            - rm -rf package-lock.json
            - rm -rf node_modules
            - npm install
      - step:
          name: Running Tests
          caches:
            - node
          script:
            - npm run test
          
      - step:
          name: Build Docker Image
          services:
            - docker
          image: atlassian/pipelines-awscli
          script:
            - echo $(aws ecr get-login --no-include-email --region eu-west-2)  > login.sh

            - sh login.sh

            - docker build -f dockerfile -t $ECR_STAGING_REPO_NAME .

            - docker tag $ECR_STAGING_REPO_NAME:latest $ECR_STAGING_REPO_URI:latest

            - docker push $ECR_STAGING_REPO_URI:latest
      - step:
          name: Deploy to Staging
          services:
            - docker
          deployment: staging
          script:
            - pipe: atlassian/aws-ecs-deploy:1.0.3
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: $ECS_STAGING_CLUSTER_NAME
                SERVICE_NAME: $ECS_STAGING_SERVICE_NAME
                TASK_DEFINITION: 'task_definition.json'
                DEBUG: "true"
    production:
      - step:
          name: Installing
          caches:
            - node
          script:
            - rm -rf package-lock.json
            - rm -rf node_modules
            - npm install
      - step:
          name: Running Tests
          caches:
            - node
          script:
            - npm run test
          
            
      - step:
          name: Build Docker Image
          services:
            - docker
          image: atlassian/pipelines-awscli
          script:
            - echo $(aws ecr get-login --no-include-email --region eu-west-2)  > login.sh

            - sh login.sh

            - docker build -f dockerfile -t $ECR_PRODUCTION_REPO_NAME .

            - docker tag $ECR_PRODUCTION_REPO_NAME:latest $ECR_PRODUCTION_REPO_URI:latest

            - docker push $ECR_PRODUCTION_REPO_URI:latest
      - step:
          name: Deploy to Production
          services:
            - docker
          deployment: production
          script:
            - pipe: atlassian/aws-ecs-deploy:1.0.3
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: $ECS_PRODUCTION_CLUSTER_NAME
                SERVICE_NAME: $ECS_PRODUCTION_SERVICE_NAME
                TASK_DEFINITION: 'task_definition.json'
                DEBUG: "true"
  branches:
    dev:
      - step:
          name: Installing
          caches:
            - node
          script:
            - npm install
      - step:
          name: Running Tests
          caches:
            - node
          script:
            - npm run test
#           services:
#             - mysql

# definitions:
#   services:
#     mysql:
#       image: mysql:5.7
#       variables:
#         MYSQL_DATABASE: $DB_DATABASE
#         MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
#         MYSQL_USER: $DB_USER
#         MYSQL_PASSWORD: $DB_PASSWORD